Robert Judka
CS550
Programming Assignment 3

program listing:
    src/super_peer.cpp
    src/leaf_node.cpp


**super_peer.cpp**
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <netdb.h>

#include <thread>
#include <mutex>
#include <unordered_map>
#include <iostream>
#include <sstream>
#include <vector>
#include <algorithm>
#include <chrono>
#include <fstream>


#define HOST "localhost" // assume all connections happen on same machine
#define MAX_FILENAME_SIZE 256 // assume the maximum file size is 256 characters
#define MAX_MSG_SIZE 4096


class SuperPeer {
    private:
        std::vector<int> _peers;
        std::vector<int> _nodes;

        std::unordered_map<std::string, std::vector<int>> _files_index; // mapping between a filename and any peers associated with it
        
        struct _message_id_hash {
            size_t operator()(const std::pair<int, int>& p) const { return p.first ^ p.second; }
        };
        
        typedef std::pair<int, int> _message_id_t;
        std::unordered_map<_message_id_t, std::chrono::system_clock::time_point, _message_id_hash> _message_ids;
        
        std::ofstream _server_logs;

        std::mutex _files_index_m;
        std::mutex _message_ids_m;
        std::mutex _log_m;

        // helper function for getting the current time to microsecond-accuracy as a string
        std::string time_now() {
            std::chrono::high_resolution_clock::duration now = std::chrono::high_resolution_clock::now().time_since_epoch();
            std::chrono::microseconds now_ms = std::chrono::duration_cast<std::chrono::microseconds>(now);
            return std::to_string(now_ms.count());
        }

        // log message to specified log file
        void log(std::string type, std::string msg) {
            std::lock_guard<std::mutex> guard(_log_m);
            _server_logs << '[' << time_now() << "] [" << type << "] " << msg  << '\n' << std::endl;
            std::cout << '[' << time_now() << "] [" << type << "] [" << msg  << "]\n" << std::endl;
        }
        
        void error(std::string type) {
            std::cerr << "\n[" << type << "] exiting program\n" << std::endl;
            exit(1);
        }

        //helper function for cleaning up the indexing server anytime a node is disconnected
        void remove_node(int socket_fd, int id, std::string type) {
            std::string msg = "closing connection for id '" + std::to_string(id) + "' and cleaning up index";
            log(type, msg);
            files_index_cleanup(id);
            close(socket_fd);
        }

        // create a connection to some server given a specific port
        int connect_server(int port) {
            struct sockaddr_in addr;
            socklen_t addr_size = sizeof(addr);
            bzero((char *)&addr, addr_size);

            // open a socket for the new connection
            struct hostent *server = gethostbyname(HOST);
            int socket_fd = socket(AF_INET, SOCK_STREAM, 0);

            addr.sin_family = AF_INET;
            bcopy((char *)server->h_addr, (char *)&addr.sin_addr.s_addr, server->h_length);
            addr.sin_port = htons(port);
            
            // connect to the server
            if (connect(socket_fd, (struct sockaddr *)&addr, addr_size) < 0) {
                return -1;
            }
            
            return socket_fd;
        }

        // handle all requests sent to the peer
        void handle_connection(int socket_fd) {
            char id;
            //initialize connection by getting id
            if (recv(socket_fd, &id, sizeof(id), 0) < 0) {
                log("conn unidentified", "closing connection");
                close(socket_fd);
                return;
            }

            switch (id) {
                case '0':
                    handle_peer_request(socket_fd);
                    break;
                case '1':
                    handle_node_request(socket_fd);
                    break;
                default:
                    log("conn unidentified", "closing connection");
                    close(socket_fd);
                    return;
            }
        }

        // handle request from neighbor peers
        void handle_peer_request(int socket_fd) {
            // get the ttl value of the sent message
            int ttl;
            if (recv(socket_fd, &ttl, sizeof(ttl), 0) < 0) {
                log("peer unresponsive", "ignoring request");
                return;
            }

            // get the id part of the message id
            int id;
            if (recv(socket_fd, &id, sizeof(id), 0) < 0) {
                log("peer unresponsive", "ignoring request");
                return;
            }

            // get the sequence message part of the message id
            int sequence_number;
            if (recv(socket_fd, &sequence_number, sizeof(sequence_number), 0) < 0) {
                log("peer unresponsive", "ignoring request");
                return;
            }            

            char buffer[MAX_FILENAME_SIZE];
            // recieve filename
            if (recv(socket_fd, buffer, sizeof(buffer), 0) < 0) {
                log("peer unresponsive", "ignoring request");
                return;
            }

            std::string ids;
            // check if message id has been seen/forwarded already
            if (check_message_id(socket_fd)) {
                // get all ids from local files index
                ids = query_local_files_index(buffer);
                if (ttl-- > 0) {
                    // get all nodes ids from all neighbor peers' files indexes
                    std::string peers_ids = query_peers_files_index(buffer, id, sequence_number, ttl);
                    // only add anything if ids where found in peers
                    if (!peers_ids.empty())
                        ids += ((!ids.empty()) ? "," : "") + peers_ids;
                }
            }

            char buffer_[MAX_MSG_SIZE];
            strcpy(buffer_, ids.c_str());
            // send comma delimited list of all ids for a specific file to the peer
            if (send(socket_fd, buffer_, sizeof(buffer_), 0) < 0) {
                log("peer unresponsive", "ignoring request");
                return;
            }
            close(socket_fd);
            log("peer disconnected", "closed connection");
        }

        // handle all requests sent to the indexing server
        void handle_node_request(int socket_fd) {
            int id;
            //initialize connection with node by getting id
            if (recv(socket_fd, &id, sizeof(id), 0) < 0) {
                log("node unidentified", "closing connection");
                close(socket_fd);
                return;
            }

            char request;
            while (1) {
                request = '0';
                // get request type from node
                if (recv(socket_fd, &request, sizeof(request), 0) < 0) {
                    remove_node(socket_fd, id, "node unresponsive");
                    return;
                }

                switch (request) {
                    case '1':
                        registry(socket_fd, id);
                        break;
                    case '2':
                        deregistry(socket_fd, id);
                        break;
                    case '3':
                        node_search(socket_fd, id);
                        break;
                    case '4':
                        print_files_map();
                        break;
                    case '5':
                        print_message_ids_list();
                        break;
                    case '0':
                        remove_node(socket_fd, id, "node disconnected");
                        return;
                    default:
                        remove_node(socket_fd, id, "unexpected request");
                        return;
                }
            }
        }

        // handles communication with node for registering a single file 
        void registry(int socket_fd, int id) {
            char buffer[MAX_FILENAME_SIZE];
            // recieve filename from node
            if (recv(socket_fd, buffer, sizeof(buffer), 0) < 0) {
                remove_node(socket_fd, id, "node unresponsive");
                return;
            }
            
            std::string filename = std::string(buffer);
            std::lock_guard<std::mutex> guard(_files_index_m);
            // add peer's id to file map if not already included
            if(!(std::find(_files_index[filename].begin(), _files_index[filename].end(), id) != _files_index[filename].end()))
                _files_index[filename].push_back(id);
        }

        // handles communication with node for deregistering a single file 
        void deregistry(int socket_fd, int id) {
            char buffer[MAX_FILENAME_SIZE];
            if (recv(socket_fd, buffer, sizeof(buffer), 0) < 0) {
                remove_node(socket_fd, id, "node unresponsive");
                return;
            }
 
            std::string filename = std::string(buffer);
            std::lock_guard<std::mutex> guard(_files_index_m);
            // remove peer's id from file
            _files_index[filename].erase(std::remove(_files_index[filename].begin(),
                                            _files_index[filename].end(), id), _files_index[filename].end());
            // remove filename from mapping if no more peers mapped to file
            if (_files_index[filename].size() == 0)
                _files_index.erase(filename);
        }

        // remove id from all files in mapping
        void files_index_cleanup(int id) {
            std::unordered_map<std::string, std::vector<int>> tmp_files_index;
            
            std::lock_guard<std::mutex> guard(_files_index_m);
            for (auto const &file_index : _files_index) {
                std::vector<int> ids = file_index.second;
                ids.erase(std::remove(ids.begin(), ids.end(), id), ids.end());
                if (ids.size() > 0)
                    tmp_files_index[file_index.first] = ids;
            }
            _files_index = tmp_files_index;
        }

        // searches local files index for filename
        std::string query_local_files_index(std::string filename) {
            std::ostringstream ids;
            if (_files_index.count(filename) > 0) {
                std::string delimiter;
                std::lock_guard<std::mutex> guard(_files_index_m);
                for (auto &&id : _files_index[filename]) {
                    // add id to stream
                    ids << delimiter << id;
                    delimiter = ',';
                }
            }
            return ids.str();
        }

        // searches all peers' files indexes for filename
        std::string query_peers_files_index(std::string filename, int id, int sequence_number, int ttl) {
            std::string ids;
            std::string delimiter;
            // iteratively query each peer to search their files index
            for (auto&& peer : _peers) {
                int socket_fd = connect_server(peer);
                if (socket_fd < 0) {
                    log("failed peer connection", "ignoring connection");
                    continue;
                }
                if (send(socket_fd, "0", sizeof(char), 0) < 0)
                    log("peer unresponsive", "ignoring request");
                else {
                    // send ttl value of current message
                    if (send(socket_fd, &ttl, sizeof(ttl), 0) < 0)
                        log("peer unresponsive", "ignoring request");
                    else {
                        // send the id part of the message id
                        if (send(socket_fd, &id, sizeof(id), 0) < 0)
                            log("peer unresponsive", "ignoring request");
                        else {
                            // send the sequence number part of the message id
                            if (send(socket_fd, &sequence_number, sizeof(sequence_number), 0) < 0)
                                log("peer unresponsive", "ignoring request");
                            else {
                                char buffer[MAX_FILENAME_SIZE];
                                strcpy(buffer, filename.c_str());
                                // send the filename of the request
                                if (send(socket_fd, buffer, sizeof(buffer), 0) < 0)
                                    log("peer unresponsive", "ignoring request");
                                else {
                                    if (!send_message_id(socket_fd, id, sequence_number))
                                        log("peer unresponsive", "ignoring request");
                                    else {
                                        std::string msg = "msg id [" + std::to_string(id) + "," +
                                                std::to_string(sequence_number) + "] to peer " + std::to_string(peer);
                                        log("forwarding message", msg);
                                        char buffer_[MAX_MSG_SIZE];
                                        // get the list of ids from the peer
                                        if (recv(socket_fd, buffer_, sizeof(buffer_), 0) < 0)
                                            log("peer unresponsive", "ignoring request");
                                        else if (buffer_[0]) {
                                            // add the list of ids to our 'global' list of all ids for this query
                                            ids += delimiter + std::string(buffer_);
                                            delimiter = ',';
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                close(socket_fd);
            }
            return ids;
        }

        // helper function for sending the parts of a message id
        bool send_message_id(int socket_fd, int id, int sequence_number) {
            if (send(socket_fd, &id, sizeof(id), 0) < 0)
                return false;

            if (send(socket_fd, &sequence_number, sizeof(sequence_number), 0) < 0)
                return false;
            
            std::lock_guard<std::mutex> guard(_message_ids_m);
            // add the message id and the time it was requested to the global message ids list
            _message_ids[{id, sequence_number}] = std::chrono::system_clock::now();
            return true;
        }

        // checks if message was already seen/forwarded
        bool check_message_id(int socket_fd) {
            int id;
            // get id part of message id
            if (recv(socket_fd, &id, sizeof(id), 0) < 0) {
                log("peer unresponsive", "ignoring request");
                return false;
            }

            int sequence_number;
            // get sequence number of message id
            if (recv(socket_fd, &sequence_number, sizeof(sequence_number), 0) < 0) {
                log("peer unresponsive", "ignoring request");
                return false;
            }

            _message_id_t msg_id = {id, sequence_number};
            std::lock_guard<std::mutex> guard(_message_ids_m);
            if (_message_ids.find(msg_id) == _message_ids.end()) {
                // add message id to global list if not found
                _message_ids[msg_id] = std::chrono::system_clock::now();
                return true;
            }
            log("message already seen", "rerouting message back to sender");
            return false;
        }
        
        // handles communication with node for returning all ids mapped to a filename
        void node_search(int socket_fd, int id) {
            char buffer[MAX_FILENAME_SIZE];
            // recieve filename from node
            if (recv(socket_fd, buffer, sizeof(buffer), 0) < 0) {
                remove_node(socket_fd, id, "node unresponsive");
                return;
            }

            _sequence_number += 1;
            // get ids from local files index
            std::string ids = query_local_files_index(buffer);
            // get all nodes ids from all neighbor peers' files indexes
            std::string peers_ids = query_peers_files_index(buffer, id, _sequence_number, _ttl);
            if (!peers_ids.empty())
                ids += ((!ids.empty()) ? "," : "") + peers_ids;
            
            char buffer_[MAX_MSG_SIZE];
            strcpy(buffer_, ids.c_str());
            // send comma delimited list of all ids for a specific file to the node
            if (send(socket_fd, buffer_, sizeof(buffer_), 0) < 0) {
                remove_node(socket_fd, id, "node unresponsive");
                return;
            }
        }

        // helper function for displaying the entire files index
        void print_files_map() {
            std::lock_guard<std::mutex> guard(_files_index_m);
            std::cout << "\n__________FILES INDEX__________" << std::endl;
            for (auto const &file_index : _files_index) {
                std::cout << file_index.first << ':';
                std::string delimiter;
                for (auto &&id : file_index.second) {
                    std::cout << delimiter << id;
                    delimiter = ',';
                }
                std::cout << std::endl;
            }
            std::cout << "_______________________________\n" << std::endl;
        }

        // helper function for displaying all message ids currently being tracked
        void print_message_ids_list() {
            std::lock_guard<std::mutex> guard(_files_index_m);
            std::cout << "\n__________MESSAGE IDS__________" << std::endl;
            for (auto const &message_id : _message_ids) {
                std::cout << '[' << message_id.first.first << ',' << message_id.first.second << "]" << std::endl;
            }
            std::cout << "_______________________________\n" << std::endl;
        }

        // gets the static network info for a peer
        void get_network(std::string config_path) {
            // open a stream to the config file
            std::ifstream config(config_path);
            int member_type;
            int id;
            int port;
            std::string peers;
            std::string nodes;

            config >> _ttl;
            std::string tmp;
            // proper config syntax is expected to be followed
            while(config >> member_type) {
                if (member_type == 0) {
                    config >> id >> port >> peers >> nodes;
                    if (id == _id) {
                        _port = port;
                        _peers = comma_delim_ints_to_vector(peers);
                        _nodes = comma_delim_ints_to_vector(nodes);
                        return;
                    }
                }
                else
                    std::getline(config, tmp); // ignore anything else in the line
            }
            error("invalid id");
        }

        // thread which continously runs, checking for old messages and removing them
        void maintain_message_ids() {
            while (1) {
                // wait 1 minute to check messages list
                sleep(60);
                std::lock_guard<std::mutex> guard(_message_ids_m);
                for (auto itr = _message_ids.cbegin(); itr != _message_ids.cend();) {
                    // remove messages if they were recorded longer than a minute ago
                    itr = (std::chrono::duration_cast<std::chrono::minutes>(std::chrono::system_clock::now() -
                                                        itr->second).count() > 1) ? _message_ids.erase(itr++) : ++itr;
                }
            }
        }

    public:
        int _ttl;
        int _id;
        int _port;
        int _socket_fd;
        int _sequence_number = 0;

        SuperPeer(int id, std::string config_path) {
            _id = id;
            get_network(config_path);

            struct sockaddr_in addr;
            socklen_t addr_size = sizeof(addr);
            bzero((char*)&addr, addr_size);
            
            addr.sin_family = AF_INET;
            addr.sin_addr.s_addr = INADDR_ANY;
            addr.sin_port = htons(_port);

            _socket_fd = socket(AF_INET, SOCK_STREAM, 0);

            // bind socket to port to be used for indexing server
            if (bind(_socket_fd, (struct sockaddr*)&addr, addr_size) < 0)
                error("failed server binding");

            std::cout << "starting indexing server on port " << _port << '\n' << std::endl;

            // start logging
            _server_logs.open("logs/super_peers/" + std::to_string(_port) + ".log");
        }

        std::vector<int> comma_delim_ints_to_vector(std::string s) {
            std::vector<int> result;

            std::stringstream ss(s);
            while(ss.good()) {
                std::string substr;
                std::getline(ss, substr, ',');
                result.push_back(atoi(substr.c_str()));
            }
            std::random_shuffle(result.begin(), result.end());
            return result;
        }

        void run() {
            struct sockaddr_in addr;
            socklen_t addr_size = sizeof(addr);
            int socket_fd;

            // start thread for maintaining messages list
            std::thread t(&SuperPeer::maintain_message_ids, this);
            t.detach();

            std::ostringstream connection;
            while (1) {
                // listen for any peer connections to start communication
                listen(_socket_fd, 5);

                if ((socket_fd = accept(_socket_fd, (struct sockaddr*)&addr, &addr_size)) < 0) {
                    // ignore any failed connections from nodes
                    log("failed connection", "ignoring connection");
                    continue;
                }

                connection << inet_ntoa(addr.sin_addr) << '@' << ntohs(addr.sin_port);
                log("conn established", connection.str());
                
                // start thread for single client-server communication
                std::thread t(&SuperPeer::handle_connection, this, socket_fd);
                t.detach(); // detaches thread and allows for next connection to be made without waiting

                connection.str("");
                connection.clear();
            }
        }

        ~SuperPeer() {
            close(_socket_fd);
            _server_logs.close();
        }
};


int main(int argc, char *argv[]) {
    // require peer id config path to be passed as arg
    if (argc < 3) {
        std::cerr << "usage: " << argv[0] << " id config_path" << std::endl;
        exit(0);
    }

    SuperPeer super_peer(atoi(argv[1]), argv[2]);
    super_peer.run();

    return 0;
}


**leaf_node.cpp**
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <dirent.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/sendfile.h>

#include <thread>
#include <mutex>
#include <iostream>
#include <sstream>
#include <vector>
#include <algorithm>
#include <chrono>
#include <fstream>


#define HOST "localhost" // assume all connections happen on same machine
#define MAX_FILENAME_SIZE 256 // assume the maximum file size is 256 characters
#define MAX_MSG_SIZE 4096
#define MAX_STAT_MSG_SIZE 16


//global counters used only for logging special messages used for later anlaysis
int SRCH_REQ_COUNTER = 0;
int OBTN_REQ_COUNTER = 0;


class LeafNode {
    private:
        std::vector<std::pair<std::string, time_t>> _files; // vector of all files within a node's directory
        std::ofstream _server_log;
        std::ofstream _client_log;

        std::mutex _log_m;

        // helper function for getting the current time to microsecond-accuracy as a string
        std::string time_now() {
            std::chrono::high_resolution_clock::duration now = std::chrono::high_resolution_clock::now().time_since_epoch();
            std::chrono::microseconds now_ms = std::chrono::duration_cast<std::chrono::microseconds>(now);
            return std::to_string(now_ms.count());
        }

        // log message to specified log file
        void log(std::ofstream &log_stream, std::string type, std::string msg) {
            std::lock_guard<std::mutex> guard(_log_m);
            log_stream << '[' << time_now() << "] [" << type << "] " << msg  << '\n' << std::endl;
        }

        //special log messages used for later analysis
        void eval_log(std::ofstream &log_stream, int key, std::string type, std::string msg) {
            std::lock_guard<std::mutex> guard(_log_m);
            log_stream << '!' << key << " [" << time_now() << "] [" << type << "] [" << msg  << "]\n" << std::endl;
        }
        
        void error(std::string type) {
            std::cerr << "\n[" << type << "] exiting program\n" << std::endl;
            exit(1);
        }

        // handles a node server's file retrieval request
        // only performs single retrieval
        void handle_client_request(int socket_fd) {
            // recieve filename to download from node client
            char buffer[MAX_FILENAME_SIZE];
            if (recv(socket_fd, buffer, MAX_FILENAME_SIZE, 0) < 0) {
                log(_server_log, "client unresponsive", "closing connection");
                return;
            }
            
            // create full file path of node server to send
            std::ostringstream filename;
            filename << std::string(_files_path);
            filename << std::string(buffer);

            int fd = open(filename.str().c_str(), O_RDONLY);
            if (fd == -1) {
                // send message to node client if file cannot be opened
                if (send(socket_fd, "-1", MAX_STAT_MSG_SIZE, 0) < 0)
                    log(_server_log, "client unresponsive", "closing connection");
            }
            else {
                struct stat file_stat;
                if (fstat(fd, &file_stat) < 0) {
                    // send message to node client if file size cannot be determined
                    if (send(socket_fd, "-2", MAX_STAT_MSG_SIZE, 0) < 0)
                        log(_server_log, "client unresponsive", "closing connection");
                }
                else {
                    char file_size[MAX_STAT_MSG_SIZE];
                    sprintf(file_size, "%ld", file_stat.st_size);

                    //send file size to node client
                    if (send(socket_fd, file_size, sizeof(file_size), 0) < 0) {
                        log(_server_log, "client unresponsive", "closing connection");
                        return;
                    }

                    off_t offset = 0;
                    int remaining_size = file_stat.st_size;
                    int sent_size = 0;
                    //send file in 4096 byte blocks until entire file sent
                    while (((sent_size = sendfile(socket_fd, fd, &offset, MAX_MSG_SIZE)) > 0) && (remaining_size > 0))
                        remaining_size -= sent_size;
                }
            }
            close(fd);
            close(socket_fd);
            log(_server_log, "client disconnected", "closed connection");
        }

        // read all files in node's directory and save to files vector
        std::vector<std::pair<std::string, time_t>> get_files() {
            std::vector<std::pair<std::string, time_t>> tmp_files;
            
            if (auto directory = opendir(_files_path.c_str())) {
                while (auto file = readdir(directory)) {
                    //skip . and .. files and any directories
                    if (!file->d_name || strcmp(file->d_name, ".") == 0 || strcmp(file->d_name, "..") == 0 || file->d_type == DT_DIR)
                        continue;
                    
                    // get full file path
                    std::ostringstream file_path;
                    file_path << _files_path;
                    file_path << file->d_name;
                    
                    int fd = open(file_path.str().c_str(), O_RDONLY);
                    if (fd == -1) {
                        //ignore file if unable to open
                        log(_client_log, "failed file open", "ignoring \"" + file_path.str() + '\"');
                        continue;
                    }
                    
                    struct stat file_stat;
                    if (fstat(fd, &file_stat) < 0) {
                        // ignore file if unable to file stats
                        log(_client_log, "failed file stat", "ignoring \"" + file_path.str() + '\"');
                        continue;
                    }
                    close(fd);

                    // save a pair of the filename and last modified date to the files vector if not already in there
                    time_t modified_time = file_stat.st_mtim.tv_sec;
                    std::pair<std::string, time_t> file_info = std::make_pair(file->d_name, modified_time);
                    if(!(std::find(tmp_files.begin(), tmp_files.end(), file_info) != tmp_files.end()))
                        tmp_files.push_back(file_info);
                }
                closedir(directory);
            }
            else {
                error("invalid directory");
            }
            return tmp_files;
        }

        // create a connection to some server given a specific port
        // peer flag used for knowing which type of server to connect
        int connect_server(int port, bool peer=true) {
            struct sockaddr_in addr;
            socklen_t addr_size = sizeof(addr);
            bzero((char *)&addr, addr_size);

            // open a socket for the new connection
            struct hostent *server = gethostbyname(HOST);
            int socket_fd = socket(AF_INET, SOCK_STREAM, 0);

            addr.sin_family = AF_INET;
            bcopy((char *)server->h_addr, (char *)&addr.sin_addr.s_addr, server->h_length);
            addr.sin_port = htons(port);
            
            // connect to the server
            if (connect(socket_fd, (struct sockaddr *)&addr, addr_size) < 0) {
                // only exit program if failed to connect to peer
                if (peer)
                    error("failed peer connection");
                else {
                    return -1;
                }
            }
            
            return socket_fd;
        }

        void register_files(int socket_fd) {
            int n;
            char buffer[MAX_FILENAME_SIZE];

            while (1) {
                std::vector<std::pair<std::string, time_t>> tmp_files = get_files();
                for(auto&& x: _files) {
                    char request = '1';
                    // send a deregister request if a file is no longer in the files vector (or has been modified)
                    if(!(std::find(tmp_files.begin(), tmp_files.end(), x) != tmp_files.end()))
                        request = '2';
                    
                    // send a register request for any other files
                    if (send(socket_fd, &request, sizeof(request), 0) < 0) {
                        log(_client_log, "server unresponsive", "ignoring request");
                    }
                    else {
                        bzero(buffer, MAX_FILENAME_SIZE);
                        strcpy(buffer, x.first.c_str());
                        // register file with the peer
                        if (send(socket_fd, buffer, sizeof(buffer), 0) < 0)
                            log(_client_log, "server unresponsive", "ignoring request");
                    }
                }
                // replace the old files vector with the new one
                _files = tmp_files;
                // wait 5 seconds to update files list 
                sleep(5);
            }
        }
        
        // handle user interface for sending a search request to the peer
        void search_request(int socket_fd) {
            std::cout << "filename: ";
            char filename[MAX_FILENAME_SIZE];
            std::cin >> filename;
            eval_log(_client_log, SRCH_REQ_COUNTER, "search request", "start");
            // send a search request to the peer
            if (send(socket_fd, "3", sizeof(char), 0) < 0) {
                std::cout << "\nunexpected connection issue: no search performed\n" << std::endl;
                log(_client_log, "server unresponsive", "ignoring request");
            }
            else {
                // send the filename to search to the peer
                if (send(socket_fd, filename, sizeof(filename), 0) < 0) {
                    std::cout << "\nunexpected connection issue: no search performed\n" << std::endl;
                    log(_client_log, "server unresponsive", "ignoring request");
                }
                else {
                    // recieve list of nodes with file from peer
                    // output appropriate message to node client
                    char buffer[MAX_MSG_SIZE];
                    if (recv(socket_fd, buffer, sizeof(buffer), 0) < 0) {
                        std::cout << "\nunexpected connection issue: no search performed\n" << std::endl;
                        log(_client_log, "server unresponsive", "ignoring request");
                    }
                    else if (!buffer[0])
                        std::cout << "\nfile \"" << filename << "\" not found\n" << std::endl;
                    else
                        std::cout << "\nnode(s) with file \"" << filename << "\": " << buffer << '\n' << std::endl;
                }
            }
            eval_log(_client_log, SRCH_REQ_COUNTER++, "search request", "end");
        }

        //helper function for creating the filename of a downloaded file
        std::string resolve_filename(std::string filename, std::string(node)) {
            std::ostringstream local_filename;
            local_filename << _files_path;
            size_t extension_idx = filename.find_last_of('.');
            local_filename << filename.substr(0, extension_idx);
            // add the file origin if the file already exists in the local directory
            if ((std::find_if(_files.begin(), _files.end(), [filename](const std::pair<std::string, int>
                                                        &element){ return element.first == filename; }) != _files.end()))
                local_filename << "-origin-" << node;
            local_filename << filename.substr(extension_idx, filename.size() - extension_idx);

            return local_filename.str();
        }
        
        // handle user interface for sending a retrieve request to a node server
        void obtain_request() {
            std::cout << "node: ";
            char node[6];
            std::cin >> node;
            eval_log(_client_log, OBTN_REQ_COUNTER, "retrieve request", "start");
            // check if the passed-in node is the current client
            if (atoi(node) == _port) {
                std::cout << "\nnode '" << node << "' is current client: no retreival performed\n" << std::endl;
                return;
            }
            // connect to the given node server
            int socket_fd = connect_server(atoi(node), false);
            if (socket_fd < 0) {
                std::cout << "\nnode '" << node << "' is not valid: no retreival performed\n" << std::endl;
                log(_client_log, "failed node server connection", "ignoring request");
                return;
            }
            
            eval_log(_client_log, OBTN_REQ_COUNTER, "retrieve request", "pause");
            std::cout << "filename: ";
            char filename[MAX_FILENAME_SIZE];
            std::cin >> filename;
            eval_log(_client_log, OBTN_REQ_COUNTER, "retrieve request", "unpause");
            if (send(socket_fd, filename, sizeof(filename), 0) < 0) {
                std::cout << "\nunexpected connection issue: no retreival performed\n" << std::endl;
                log(_client_log, "node unresponsive", "ignoring request");
            }
            else {
                char buffer[MAX_STAT_MSG_SIZE];
                // get the file size from the node server
                if (recv(socket_fd, buffer, sizeof(buffer), 0) < 0) {
                    std::cout << "\nunexpected connection issue: no retreival performed\n" << std::endl;
                    log(_client_log, "node unresponsive", "ignoring request");
                }
                else {
                    int file_size = atoi(buffer);
                    // handle message from node server
                    if (file_size == -1)
                        std::cout << "\nnode '" << node << "' does not have file \"" << filename << "\": no retreival performed\n" << std::endl;
                    else if (file_size == -2)
                        std::cout << "\ncould not read file \"" << filename << "\"'s stats: no retreival performed\n" << std::endl;
                    else {
                        // create pretty filename for outputting results to node client
                        std::string local_filename_path = resolve_filename(filename, node);
                        size_t filename_idx = local_filename_path.find_last_of('/');
                        std::string local_filename = local_filename_path.substr(filename_idx+1, local_filename_path.size() - filename_idx);
                        FILE *file = fopen(local_filename_path.c_str(), "w");
                        if (file == NULL) {
                            std::cout << "\nunable to create new file \"" << local_filename << "\": no retreival performed\n" << std::endl;
                            log(_client_log, "failed file open", "ignoring file");
                        }
                        else {
                            char buffer_[MAX_MSG_SIZE];
                            int remaining_size = file_size;
                            int received_size;
                            // write blocks recieved from node server to new file
                            while (((received_size = recv(socket_fd, buffer_, sizeof(buffer_), 0)) > 0) && (remaining_size > 0)) {
                                fwrite(buffer_, sizeof(char), received_size, file);
                                remaining_size -= received_size;
                            }
                            fclose(file);
                            std::cout << "\nfile \"" << filename << "\" downloaded as \"" << local_filename << "\"\n" << std::endl;
                            std::cout << "\ndislpay file '" << local_filename << "'\n. . .\n" << std::endl;
                            log(_client_log, "file download", "file download successful");
                        }
                    }
                }
            }
            eval_log(_client_log, OBTN_REQ_COUNTER++, "retrieve request", "end");
            close(socket_fd);
        }

        // gets the static network info for a node
        void get_network(std::string config_path) {
            // open a stream to the config file
            std::ifstream config(config_path);
            int ttl;
            int member_type;
            int id;
            int port;
            int peer_id;

            // proper config syntax is expected to be followed
            config >> ttl;
            std::string tmp;
            while(config >> member_type) {
                if (member_type == 1) {
                    config >> id >> port >> peer_id;
                    if (id == _id) {
                        _port = port;
                        _peer_id = peer_id;
                        return;
                    }
                }
                else
                    std::getline(config, tmp); // ignore anything else in the line
            }
            error("invalid id");
        }

    public:
        std::string _files_path;
        int _id;
        int _port;
        int _peer_id;
        int _socket_fd;

        LeafNode(int id, std::string config_path, std::string files_path) {
            _id = id;
            get_network(config_path);
            
            _files_path = files_path;
            // add ending '/' if missing in path argument
            if (_files_path.back() != '/')
                _files_path += '/';
            _files = get_files();

            struct sockaddr_in addr;
            socklen_t addr_size = sizeof(addr);
            bzero((char*)&addr, addr_size);
            
            addr.sin_family = AF_INET;
            addr.sin_addr.s_addr = INADDR_ANY;
            addr.sin_port = htons(_port);

            _socket_fd = socket(AF_INET, SOCK_STREAM, 0);

            // bind socket to port to be used for node server
            if (bind(_socket_fd, (struct sockaddr*)&addr, addr_size) < 0)
                error("failed to start node server");

            std::cout << "current node id: " << _port << '\n' << std::endl;

            // start logging for both node client and node server
            std::string log_name_prefix = "logs/leaf_nodes/" + std::to_string(_port);
            _server_log.open(log_name_prefix + "_server.log");
            _client_log.open(log_name_prefix + "_client.log");
        }
        
        void run_client() {
            int socket_fd = connect_server(_peer_id);

            //send type id to be used as client id in peer
            if (send(socket_fd, "1", sizeof(char), 0) < 0)
                error("server unreachable");

            //send node server port number to be used as client id in peer
            if (send(socket_fd, &_port, sizeof(_port), 0) < 0)
                error("server unreachable");

            //start thread for automatic files updater
            std::thread t(&LeafNode::register_files, this, socket_fd);
            t.detach();

            //continously prompt user for request
            while (1) {
                std::string request;
                std::cout << "request [(s)earch|(o)btain|(q)uit]: ";
                std::cin >> request;

                switch (request[0]) {
                    case 's':
                    case 'S':
                        search_request(socket_fd);
                        break;
                    case 'o':
                    case 'O':
                        obtain_request();
                        break;
                    case 'q':
                    case 'Q':
                        close(socket_fd);
                        exit(0);
                        break;
                    case 'l':
                    case 'L':
                        // used for testing to see all registered files
                        send(socket_fd, "4", sizeof(char), 0);
                        break;
                    case 'm':
                    case 'M':
                        // used for testing to see current message ids list
                        send(socket_fd, "5", sizeof(char), 0);
                        break;
                    default:
                        std::cout << "\nunexpected request\n" << std::endl;
                        break;
                }
            }
        }

        void run_server() {
            struct sockaddr_in addr;
            socklen_t addr_size = sizeof(addr);
            int socket_fd;

            std::ostringstream connection;
            while (1) {
                // listen for any node connections to start file download
                listen(_socket_fd, 5);

                if ((socket_fd = accept(_socket_fd, (struct sockaddr*)&addr, &addr_size)) < 0) {
                    // ignore any failed connections from node clients
                    log(_server_log, "failed client connection", "ignoring connection");
                    continue;
                }

                connection << inet_ntoa(addr.sin_addr) << '@' << ntohs(addr.sin_port);
                log(_server_log, "client connected", connection.str());

                // start thread for performing file download
                std::thread t(&LeafNode::handle_client_request, this, socket_fd);
                t.detach(); // detaches thread and allows for next connection to be made without waiting

                connection.str("");
                connection.clear();
            }
        }

        void run() {
            // start independent threads for both client and server
            std::thread c_t(&LeafNode::run_client, this);
            std::thread s_t(&LeafNode::run_server, this);

            c_t.join();
            s_t.join();
        }

        ~LeafNode() {
            close(_socket_fd);
            _server_log.close();
            _client_log.close();
        }
};


int main(int argc, char *argv[]) {
    // require node id, config path, & files path to be passed as arg
    if (argc < 4) {
        std::cerr << "usage: " << argv[0] << " id config_path files_path" << std::endl;
        exit(0);
    }

    LeafNode leaf_node(atoi(argv[1]), argv[2], argv[3]);
    leaf_node.run();

    return 0;
}